// Generated by .NET Reflector from H:\Web\ci.hbs.net\Branches\Main_Development\CMS\Bin\CMS.Ecommerce.Web.UI.dll
namespace CMS.Ecommerce.Web.UI
{
    using CMS.Base;
    using CMS.DataEngine;
    using CMS.Ecommerce;
    using CMS.EventLog;
    using CMS.Globalization;
    using CMS.Helpers;
    using CMS.SiteProvider;
    using System;
    using System.Collections.Specialized;
    using System.Globalization;
    using System.Net;
    using System.Net.Sockets;
    using System.Text;

    using AuthorizeNet.Api.Controllers;
    using AuthorizeNet.Api.Contracts.V1;
    using AuthorizeNet.Api.Controllers.Bases;

    public class CMSAuthorizeNetDelayPaymentProvider : CMSPaymentGatewayProvider
    {
        private const string DELIMITATIVE_CHAR = ";";
        private const string ENCAPSULATE_CHAR = "|";
        private const string EVENT_CODE_CUSTOMER_IP_FORMAT = "CUSTOMERIPFORMAT";
        private const string EVENT_CUSTOMER_IP_NULL = "CUSTOMERIPNULL";
        private const string EVENT_SOURCE = "CMSAuthorizeNetDelayPaymentProvider";

        public override PaymentResultInfo CreatePaymentResultInfo()
        {
            return new AuthorizeNetDelayedPaymentResultInfo();
        }

        public virtual string GetOrderDescription()
        {
            if (base.ShoppingCartInfoObj != null)
            {
                return string.Format(ResHelper.GetString("AuthorizeNET.OrderDescription", null, true), base.ShoppingCartInfoObj.OrderId);
            }
            return "";
        }

        public override string GetPaymentDataFormPath()
        {
            return "~/CMSModules/Ecommerce/Controls/PaymentGateways/AuthorizeNetForm.ascx";
        }

        public override void ProcessPayment()
        {
            if ((base.ShoppingCartInfoObj != null) && (base.ShoppingCartInfoObj.PaymentGatewayCustomData != null))
            {
                string paymentGatewayUrl = this.GetPaymentGatewayUrl();
                if (paymentGatewayUrl.StartsWithCSafe("~"))
                {
                    if (base.mShoppingCartControl != null)
                    {
                        base.mShoppingCartControl.CleanUpShoppingCart();
                    }
                    URLHelper.Redirect(paymentGatewayUrl);
                }
                else
                {
                    var response = GetPaymentAuthorizationResponse();
                    HandleAuthorizeTransactionResponse(response);
                }
            }
            else
            {
                base.ErrorMessage = ResHelper.GetString("paymentgatewayprovider.paymentdatanotfound", null, true);
            }
        }

        #region "Custom"

        /// <summary>
        /// Creates the Payment Authorization Request with the information from the form/order
        /// </summary>
        /// <returns>The Transaction Response</returns>
        public createTransactionResponse GetPaymentAuthorizationResponse()
        {
            string currentSiteName = SiteContext.CurrentSiteName;

            if(SettingsKeyInfoProvider.GetBoolValue(currentSiteName + ".CMSAuthorizeNETSandBox")) { 
                ApiOperationBase<ANetApiRequest, ANetApiResponse>.RunEnvironment = AuthorizeNet.Environment.SANDBOX;
            } else
            {
                ApiOperationBase<ANetApiRequest, ANetApiResponse>.RunEnvironment = AuthorizeNet.Environment.PRODUCTION;
            }

            // define the merchant information (authentication / transaction id)
            ApiOperationBase<ANetApiRequest, ANetApiResponse>.MerchantAuthentication = new merchantAuthenticationType()
            {
                name = SettingsKeyInfoProvider.GetValue(currentSiteName + ".CMSAuthorizeNETAPILogin"),
                ItemElementName = ItemChoiceType.transactionKey,
                Item = SettingsKeyInfoProvider.GetValue(currentSiteName + ".CMSAuthorizeNETTransactionKey")
            };

            var creditCard = new creditCardType
            {
                cardNumber = CMS.Helpers.ValidationHelper.GetString(base.PaymentDataForm.PaymentGatewayCustomData["cardnumber"], "", (CultureInfo)null),
                cardCode = CMS.Helpers.ValidationHelper.GetString(base.PaymentDataForm.PaymentGatewayCustomData["cardccv"], "", (CultureInfo)null),
            };

            DateTime time = CMS.Helpers.ValidationHelper.GetDateTime(base.PaymentDataForm.PaymentGatewayCustomData["cardexpiration"], DateTimeHelper.ZERO_TIME, (CultureInfo)null);
            if (time != DateTimeHelper.ZERO_TIME)
            {
                creditCard.expirationDate = time.ToString("MM/yyyy", CultureHelper.EnglishCulture.DateTimeFormat);
            }


            //standard api call to retrieve response
            var paymentType = new paymentType { Item = creditCard };
            var transactionRequest = new transactionRequestType
            {
                transactionType = transactionTypeEnum.authOnlyTransaction.ToString(),    // authorize only
                payment = paymentType,
            };

            transactionRequest.amount = Convert.ToDecimal(base.ShoppingCartInfoObj.RoundTo(base.Order.OrderTotalPrice).ToString(CultureHelper.EnglishCulture.NumberFormat));

            try
            {
                IPAddress address = IPAddress.Parse(CMS.Helpers.RequestContext.UserHostAddress);
                if (address.AddressFamily == AddressFamily.InterNetwork)
                {
                    transactionRequest.customerIP = address.ToString();
                }
            }
            catch (ArgumentException exception)
            {
                EventLogProvider.LogException("CMSAuthorizeNetDelayPaymentProvider", "CUSTOMERIPNULL", exception, 0, null, null);
            }
            catch (FormatException exception2)
            {
                EventLogProvider.LogException("CMSAuthorizeNetDelayPaymentProvider", "CUSTOMERIPFORMAT", exception2, 0, null, null);
            }
            if (base.ShoppingCartInfoObj != null)
            {
                IAddress shoppingCartBillingAddress = base.ShoppingCartInfoObj.ShoppingCartBillingAddress;
                if (shoppingCartBillingAddress != null)
                {
                    transactionRequest.billTo = new customerAddressType();

                    if (base.ShoppingCartInfoObj.Customer != null)
                    {
                        transactionRequest.billTo.firstName = base.ShoppingCartInfoObj.Customer.CustomerFirstName;
                        transactionRequest.billTo.lastName = base.ShoppingCartInfoObj.Customer.CustomerLastName;
                        transactionRequest.billTo.email = base.ShoppingCartInfoObj.Customer.CustomerEmail;
                    }
                    transactionRequest.billTo.address = shoppingCartBillingAddress.AddressLine1 + "," + shoppingCartBillingAddress.AddressLine2;
                    transactionRequest.billTo.city = shoppingCartBillingAddress.AddressCity;
                    transactionRequest.billTo.zip = shoppingCartBillingAddress.AddressZip;
                    StateInfo stateInfo = StateInfoProvider.GetStateInfo(shoppingCartBillingAddress.AddressStateID);
                    if (stateInfo != null)
                    {
                        transactionRequest.billTo.state = stateInfo.StateCode;
                    }
                    CountryInfo countryInfo = CountryInfoProvider.GetCountryInfo(shoppingCartBillingAddress.AddressCountryID);
                    if (countryInfo != null)
                    {
                        transactionRequest.billTo.country = countryInfo.CountryName;
                    }
                }
            }
            transactionRequest.order = new orderType();
            transactionRequest.order.description = this.GetOrderDescription();
            transactionRequest.order.invoiceNumber = base.Order.OrderInvoiceNumber;

            if (base.ShoppingCartInfoObj.Currency != null)
            {
                transactionRequest.currencyCode = base.ShoppingCartInfoObj.Currency.CurrencyCode;
            }

            var request = new createTransactionRequest { transactionRequest = transactionRequest };

            // instantiate the contoller that will call the service
            var controller = new createTransactionController(request);
            controller.Execute();

            // get the response from the service (errors contained if any)
            return controller.GetApiResponse();
        }

        /// <summary>
        /// Handles the response of the Authorization Request.
        /// </summary>
        /// <param name="response">The create transaction reqsponse</param>
        public void HandleAuthorizeTransactionResponse(createTransactionResponse response)
        {
            string ResponseError = "";
            //validate
            if (response != null)
            {
                if (response.messages.resultCode == messageTypeEnum.Ok)
                {
                    if (response.transactionResponse.messages != null)
                    {
                        base.PaymentResult.PaymentIsCompleted = true;
                        base.PaymentResult.PaymentTransactionID = response.transactionResponse.transId;
                        // This will be used to charge the card
                        ((AuthorizeNetDelayedPaymentResultInfo)base.PaymentResult).AuthorizationCode = response.transactionResponse.authCode;
                        base.PaymentResult.PaymentDescription = "";
                        base.PaymentResult.PaymentStatusName = "{$PaymentGateway.Result.Status.Completed$}";
                        base.PaymentResult.PaymentStatusValue = "authorize_completed";
                        base.InfoMessage = string.Format(ResHelper.GetString("AuthorizeNET.PaymentSucceeded", null, true), "", "");
                    }
                    else
                    {
                        if (response.transactionResponse.errors != null)
                        {
                            ResponseError = string.Format("Transaction Response failed, Error Code: {0}, Message: {1}", response.transactionResponse.errors[0].errorCode, response.transactionResponse.errors[0].errorText);
                            EventLogProvider.LogEvent(new EventLogInfo()
                            {
                                EventType = "E",
                                EventCode = "AuthorizeTransactionFailure",
                                EventDescription = ResponseError,
                                Source = EVENT_SOURCE
                            });
                        }
                        else
                        {
                            ResponseError = "Transaction Response failed, no errors provided.";
                            EventLogProvider.LogEvent(new EventLogInfo()
                            {
                                EventType = "E",
                                EventCode = "AuthorizeTransactionFailure",
                                EventDescription = ResponseError,
                                Source = EVENT_SOURCE
                            });
                        }
                    }
                }
                else
                {
                    if (response.transactionResponse != null && response.transactionResponse.errors != null)
                    {
                        ResponseError = string.Format("Transaction Response failed, Error Code: {0}, Message: {1}", response.transactionResponse.errors[0].errorCode, response.transactionResponse.errors[0].errorText);
                        EventLogProvider.LogEvent(new EventLogInfo()
                        {
                            EventType = "E",
                            EventCode = "AuthorizeTransactionFailureResponseCode",
                            EventDescription = ResponseError,
                            Source = EVENT_SOURCE
                        });
                    }
                    else
                    {
                        ResponseError = string.Format("Transaction Response failed, Error Code: {0}, Message: {1}", response.messages.message[0].code, response.messages.message[0].text);
                        EventLogProvider.LogEvent(new EventLogInfo()
                        {
                            EventType = "E",
                            EventCode = "AuthorizeTransactionFailureResponseCode",
                            EventDescription = ResponseError,
                            Source = EVENT_SOURCE
                        });
                    }
                }
            }
            else
            {
                ResponseError = "Transaction Response was null, please ensure your end point URLs are correct";
                EventLogProvider.LogEvent(new EventLogInfo()
                {
                    EventType = "E",
                    EventCode = "AuthorizeTransactionFailureNullResponse",
                    EventDescription = ResponseError,
                    Source = EVENT_SOURCE
                });
            }

            if (!string.IsNullOrWhiteSpace(ResponseError))
            {
                base.PaymentResult.PaymentStatusName = "{$PaymentGateway.Result.Status.Failed$}";
                base.PaymentResult.PaymentStatusValue = "authorize_failed";
                base.PaymentResult.PaymentIsCompleted = false;
                base.PaymentResult.PaymentDescription = ResponseError;
                base.ErrorMessage = base.PaymentResult.PaymentDescription;
            }
            this.UpdateOrderPaymentResult();
        }

        public static bool CapturePayment(OrderInfo OrderObject)
        {
            string currentSiteName = SiteContext.CurrentSiteName;

            if (SettingsKeyInfoProvider.GetBoolValue(currentSiteName + ".CMSAuthorizeNETTestMode"))
            {
                ApiOperationBase<ANetApiRequest, ANetApiResponse>.RunEnvironment = AuthorizeNet.Environment.SANDBOX;
            }
            else
            {
                ApiOperationBase<ANetApiRequest, ANetApiResponse>.RunEnvironment = AuthorizeNet.Environment.PRODUCTION;
            }

            // define the merchant information (authentication / transaction id)
            ApiOperationBase<ANetApiRequest, ANetApiResponse>.MerchantAuthentication = new merchantAuthenticationType()
            {
                name = SettingsKeyInfoProvider.GetValue(currentSiteName + ".CMSAuthorizeNETAPILogin"),
                ItemElementName = ItemChoiceType.transactionKey,
                Item = SettingsKeyInfoProvider.GetValue(currentSiteName + ".CMSAuthorizeNETTransactionKey")
            };

            var transactionRequest = new transactionRequestType
            {
                transactionType = transactionTypeEnum.priorAuthCaptureTransaction.ToString(),    // Capture only
            };

            // Get Shopping Cart info from order so we can call the RoundTo on the culture
            ShoppingCartInfo OrderCartObject = ShoppingCartInfoProvider.GetShoppingCartInfoFromOrder(OrderObject.OrderID);
            transactionRequest.amount = Convert.ToDecimal(OrderCartObject.RoundTo(OrderObject.OrderTotalPrice).ToString(CultureHelper.EnglishCulture.NumberFormat));

            // Check if the amount is less than or equal to the authorized amount, otherwise add an event log error and abort.
            if (transactionRequest.amount > ValidationHelper.GetDecimal(((AuthorizeNetDelayedPaymentResultInfo)OrderObject.OrderPaymentResult).PreviouslyAuthorizedAmount, 0))
            {
                EventLogProvider.LogEvent(new EventLogInfo()
                {
                    EventType = "E",
                    EventCode = "CapturePaymentError",
                    EventDescription = string.Format("The requested amount to capture from the credit card ({0}) is greater than the previously authorized amount ({1}), user must re-authorize payment for the larger amount"),
                    Source = EVENT_SOURCE
                });
                return false;
            }

            transactionRequest.refTransId = ((AuthorizeNetDelayedPaymentResultInfo)OrderObject.OrderPaymentResult).AuthorizationCode;
            transactionRequest.order.invoiceNumber = OrderObject.OrderInvoiceNumber;
            
            var request = new createTransactionRequest { transactionRequest = transactionRequest };

            // instantiate the contoller that will call the service
            var controller = new createTransactionController(request);
            controller.Execute();

            // get the response from the service (errors contained if any)
            var response = controller.GetApiResponse();
            return HandleCaptureTransactionResponse(response);
        }

        public static bool HandleCaptureTransactionResponse(createTransactionResponse response)
        {
            string ResponseError = "";
            //validate
            if (response != null)
            {
                if (response.messages.resultCode == messageTypeEnum.Ok)
                {
                    if (response.transactionResponse.messages != null)
                    {
                        if (response.transactionResponse.responseCode == "1")
                        {
                            return true;
                        } else
                        {
                            string ResponseCodeValue = "";
                            switch(response.transactionResponse.responseCode)
                            {
                                case "2":
                                    ResponseCodeValue = "Declined";
                                    break;
                                case "3":
                                default:
                                    ResponseCodeValue = "Error";
                                    break;
                                case "4":
                                    ResponseCodeValue = "Held for Review";
                                    break;
                            }
                            ResponseError = string.Format("Transaction Response failed, Error Code: {0}, Message: {1}", response.transactionResponse.responseCode, ResponseCodeValue);
                            EventLogProvider.LogEvent(new EventLogInfo()
                            {
                                EventType = "E",
                                EventCode = "CaptureTransactionFailure",
                                EventDescription = ResponseError,
                                Source = EVENT_SOURCE
                            });
                        }
                            
                    }
                    else
                    {
                        if (response.transactionResponse.errors != null)
                        {
                            ResponseError = string.Format("Transaction Response failed, Error Code: {0}, Message: {1}", response.transactionResponse.errors[0].errorCode, response.transactionResponse.errors[0].errorText);
                            EventLogProvider.LogEvent(new EventLogInfo()
                            {
                                EventType = "E",
                                EventCode = "CaptureTransactionFailure",
                                EventDescription = ResponseError,
                                Source = EVENT_SOURCE
                            });
                        }
                        else
                        {
                            ResponseError = "Transaction Response failed, no errors provided.";
                            EventLogProvider.LogEvent(new EventLogInfo()
                            {
                                EventType = "E",
                                EventCode = "CaptureTransactionFailure",
                                EventDescription = ResponseError,
                                Source = EVENT_SOURCE
                            });
                        }
                    }
                }
                else
                {
                    if (response.transactionResponse != null && response.transactionResponse.errors != null)
                    {
                        ResponseError = string.Format("Transaction Response failed, Error Code: {0}, Message: {1}", response.transactionResponse.errors[0].errorCode, response.transactionResponse.errors[0].errorText);
                        EventLogProvider.LogEvent(new EventLogInfo()
                        {
                            EventType = "E",
                            EventCode = "CaptureTransactionFailureResponseCode",
                            EventDescription = ResponseError,
                            Source = EVENT_SOURCE
                        });
                    }
                    else
                    {
                        ResponseError = string.Format("Transaction Response failed, Error Code: {0}, Message: {1}", response.messages.message[0].code, response.messages.message[0].text);
                        EventLogProvider.LogEvent(new EventLogInfo()
                        {
                            EventType = "E",
                            EventCode = "CaptureTransactionFailureResponseCode",
                            EventDescription = ResponseError,
                            Source = EVENT_SOURCE
                        });
                    }
                }
            }
            else
            {
                ResponseError = "Transaction Response was null, please ensure your end point URLs are correct";
                EventLogProvider.LogEvent(new EventLogInfo()
                {
                    EventType = "E",
                    EventCode = "CaptureTransactionFailureNullResponse",
                    EventDescription = ResponseError,
                    Source = EVENT_SOURCE
                });
            }

            return false;
        }


        #endregion

    }
}
