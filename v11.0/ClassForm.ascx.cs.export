using System;
using CMS.CustomTables;
using CMS.DataEngine;
using CMS.Helpers;
using CMS.Localization;
using CMS.Membership;
using CMS.SiteProvider;
using CMS.WebAnalytics;
using System.Data;
using CMS.PortalEngine.Web.UI;
using CMS.Modules;

public partial class CMSWebParts_Custom_ClassForm : CMSAbstractWebPart
{
    #region "Public properties"

    /// <summary>
    /// Custom table used for edit item.
    /// </summary>
    public string ClassName
    {
        get
        {
            return ValidationHelper.GetString(GetValue("ClassName"), String.Empty);
        }
        set
        {
            SetValue("ClassName", value);
        }
    }


    /// <summary>
    /// Key name used to identify edited object.
    /// </summary>
    public string ItemKeyName
    {
        get
        {
            return ValidationHelper.GetString(GetValue("ItemKeyName"), "edititemid");
        }
        set
        {
            SetValue("ItemKeyName", value);
        }
    }

    /// <summary>
    /// Key name used to identify edited object.
    /// </summary>
    public string ItemKeyValue
    {
        get
        {
            return ValidationHelper.GetString(GetValue("ItemKeyValue"), "");
        }
        set
        {
            SetValue("ItemKeyValue", value);
        }
    }


    /// <summary>
    /// Gets or sets the alternative form full name (ClassName.AlternativeFormName).
    /// </summary>
    public string AlternativeFormName
    {
        get
        {
            return ValidationHelper.GetString(GetValue("AlternativeFormName"), "");
        }
        set
        {
            SetValue("AlternativeFormName", value);
        }
    }


    /// <summary>
    /// Gets or sets the value that indicates whether the WebPart use colon behind label.
    /// </summary>
    public bool UseColonBehindLabel
    {
        get
        {
            return ValidationHelper.GetBoolean(GetValue("UseColonBehindLabel"), true);
        }
        set
        {
            SetValue("UseColonBehindLabel", value);
        }
    }


    /// <summary>
    /// Gets or sets the message which is displayed after validation failed.
    /// </summary>
    public string ValidationErrorMessage
    {
        get
        {
            return ValidationHelper.GetString(GetValue("ValidationErrorMessage"), "");
        }
        set
        {
            SetValue("ValidationErrorMessage", value);
        }
    }

    /// <summary>
    /// Gets or sets the Check permissions value, which determines if the Create/Modify should be checked.
    /// </summary>
    public bool CheckPermissions
    {
        get
        {
            return ValidationHelper.GetBoolean(GetValue("CheckPermissions"), true);
        }
        set
        {
            SetValue("CheckPermissions", value);
        }
    }

    /// <summary>
    /// Gets or sets the Where Condition value, which can be used to add additional checks so a user does not modify data they should not be modifying.
    /// </summary>
    public string WhereCondition
    {
        get
        {
            return ValidationHelper.GetString(GetValue("WhereCondition"), "");
        }
        set
        {
            SetValue("WhereCondition", value);
        }
    }


    /// <summary>
    /// Gets or sets the conversion track name used after successful registration.
    /// </summary>
    public string TrackConversionName
    {
        get
        {
            return ValidationHelper.GetString(GetValue("TrackConversionName"), "");
        }
        set
        {
            if (value.Length > 400)
            {
                value = value.Substring(0, 400);
            }
            SetValue("TrackConversionName", value);
        }
    }


    /// <summary>
    /// Gets or sets the conversion value used after successful registration.
    /// </summary>
    public double ConversionValue
    {
        get
        {
            return ValidationHelper.GetDoubleSystem(GetValue("ConversionValue"), 0);
        }
        set
        {
            SetValue("ConversionValue", value);
        }
    }

    #endregion


    #region "Methods"

    /// <summary>
    /// Load event handler.
    /// </summary>
    protected override void OnLoad(EventArgs e)
    {
        form.OnAfterSave += form_OnAfterSave;
        form.OnBeforeSave += form_OnBeforeSave;
        base.OnLoad(e);
    }


    /// <summary>
    /// Content loaded event handler.
    /// </summary>
    public override void OnContentLoaded()
    {
        base.OnContentLoaded();
        SetupControl();
    }


    /// <summary>
    /// Reloads data for partial caching.
    /// </summary>
    public override void ReloadData()
    {
        base.ReloadData();
        SetupControl();
    }


    /// <summary>
    /// Setups control.
    /// </summary>
    private void SetupControl()
    {
        if (StopProcessing)
        {
            form.StopProcessing = true;
        }
        else
        {
            ltrHideForm.Text = "";
            var ItemID = QueryHelper.GetInteger(ItemKeyName, 0); ;
            if (ItemID == 0 && !string.IsNullOrEmpty(ItemKeyValue))
            {
                var row = new DataQuery(ClassName, "selectall").WhereEquals(ItemKeyName, ItemKeyValue).Where(string.IsNullOrWhiteSpace(WhereCondition) ? "1=1" : WhereCondition);
                if (!DataHelper.DataSourceIsEmpty(row))
                {
                    DataSet dt = row.Result;
                    int.TryParse((dt.Tables[0].Rows[0].ItemArray[0] ?? "").ToString(), out ItemID);
                }
            }
            form.Enabled = true;
            form.ClassName = ClassName;
            form.UseColonBehindLabel = UseColonBehindLabel;
            form.ValidationErrorMessage = ValidationErrorMessage;
            form.AlternativeFormFullName = AlternativeFormName;
            form.ItemID = ItemID;

            // Check user permissions here
            CheckUserPermissions();

        }
    }


    /// <summary>
    /// OnBeforeSave event handler
    /// </summary>
    protected void form_OnBeforeSave(object sender, EventArgs e)
    {
        CheckUserPermissions();
    }


    /// <summary>
    /// OnAfterSave event handler
    /// </summary>
    protected void form_OnAfterSave(object sender, EventArgs e)
    {
        if (form.Enabled && form.IsInsertMode)
        {
            if ((TrackConversionName != String.Empty))
            {
                string siteName = SiteContext.CurrentSiteName;

                if (AnalyticsHelper.AnalyticsEnabled(siteName) && !AnalyticsHelper.IsIPExcluded(siteName, RequestContext.UserHostAddress))
                {
                    HitLogProvider.LogConversions(SiteContext.CurrentSiteName, LocalizationContext.PreferredCultureCode, TrackConversionName, 0, ConversionValue);
                }
            }

            // Redirect to edit mode after new item submit
            URLHelper.Redirect(URLHelper.AddParameterToUrl(RequestContext.CurrentURL, ItemKeyName, form.ItemID.ToString()));
        }
    }

    #endregion


    #region "Private methods"

    /// <summary>
    /// Checks create or modify permission.
    /// </summary>
    private void CheckUserPermissions()
    {
        if(!CheckPermissions)
        {
            return;
        }
        DataClassInfo ctItem = DataClassInfoProvider.GetDataClassInfo(ClassName);
        bool checkResource = false;
        string ResourceName = "";
        if(ValidationHelper.GetInteger(ctItem.ClassResourceID, -1) > 0)
        {
            ResourceName = ResourceInfoProvider.GetResourceInfo(ctItem.ClassResourceID).ResourceName;
            checkResource = true;
        }
        

        // If editing item
        if (form.ItemID > 0)
        {
            bool GlobalModify = (checkResource ? MembershipContext.AuthenticatedUser.IsAuthorizedPerResource(ResourceName, "Modify") : false);
            bool ClassSpecificModify = MembershipContext.AuthenticatedUser.IsAuthorizedPerObject(CMS.DataEngine.PermissionsEnum.Modify, ctItem.ClassName, SiteContext.CurrentSiteName);

            // Check 'Modify' permission
            if (!(GlobalModify || ClassSpecificModify))
            {
                // Show error message
                form.MessagesPlaceHolder.ClearLabels();
                form.ShowError(String.Format(GetString("customtable.permissiondenied.modify"), ctItem.ClassName));
                HideForm();
            }
        }
        else
        {
            bool GlobalCreate = (checkResource ? MembershipContext.AuthenticatedUser.IsAuthorizedPerResource(ResourceName, "Create") : false);
            bool ClassSpecificCreate = MembershipContext.AuthenticatedUser.IsAuthorizedPerObject(CMS.DataEngine.PermissionsEnum.Create, ctItem.ClassName, SiteContext.CurrentSiteName);

            // Check 'Create' permission
            if (!(GlobalCreate || ClassSpecificCreate))
            {
                // Show error message
                form.MessagesPlaceHolder.ClearLabels();
                form.ShowError(String.Format(GetString("customtable.permissiondenied.create"), ctItem.ClassName));
                HideForm();
            }
        }
    }

    private void HideForm()
    {
        form.ItemID = 0;
        form.Enabled = false;
        ltrHideForm.Text = string.Format("<style> #{0} > div[id*='pnlForm'] {{ display:none; }}</style>", form.ClientID);
    }


    
    #endregion
}
